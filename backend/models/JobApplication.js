const mongoose = require("mongoose");

const WorkerDetailsSchema = new mongoose.Schema({
  fullName: String,
  dateOfBirth: String,
  gender: { type: String, enum: ["Male", "Female", "Other"] },
  nationality: String,
  address: {
    street: String,
    city: String,
    state: String,
    zip: String,
    country: String,
  },
  contact: {
    phone: String,
    alternatePhone: String,
    email: String,
  },
  employmentPreferences: {
    position: String,
    startDate: String,
    desiredSalary: String,
    preferredLocations: String,
    overtime: Boolean,
    weekends: Boolean,
    employmentType: { type: String, enum: ["Full-time", "Part-time", "Temporary/Contract"] },
  },
  skillsAndCertifications: {
    skills: [String],
    certifications: [String],
    safetyTraining: Boolean,
    forkliftCertification: Boolean,
    firstAidCertification: Boolean,
    otherCertifications: String,
    yearsExperience: Number,
  },
  education: {
    highestLevel: String,
    institutionName: String,
    fieldOfStudy: String,
  },
  employmentHistory: [{
    companyName: String,
    positionHeld: String,
    startDate: String,
    endDate: String,
    responsibilities: String,
  }],
  references: [{
    name: String,
    relationship: String,
    contact: String,
  }],
  healthAndSafety: {
    medicalConditions: String,
    canLiftHeavy: Boolean,
    comfortableHeights: Boolean,
    allergies: String,
  },
  legalAndBackground: {
    legallyAllowed: Boolean,
    convictions: String,
  },
  additionalInfo: {
    motivation: String,
    achievements: String,
    languages: [String],
    hobbies: [String],
  },
});

const ContractorDetailsSchema = new mongoose.Schema({
  fullName: String,
  companyName: String,
  dateOfBirth: String,
  gender: { type: String, enum: ["Male", "Female", "Other"] },
  address: String,
  phone: String,
  email: String,
  website: String,
  contractorType: { type: String, enum: ["General", "Subcontractor", "Specialty"] },
  licenseNumber: String,
  licenseExpiry: String,
  yearsExperience: Number,
  teamSize: Number,
  areasOfExpertise: String,
  startDate: String,
  preferredLocations: String,
  willingToTravel: Boolean,
  skills: [String],
  certifications: [String],
  insurance: [String],
  businessType: { type: String, enum: ["Sole Proprietor", "Partnership", "LLC", "Corp"] },
  taxNumber: String,
  notableProjects: [{
    projectName: String,
    role: String,
    startDate: String,
    endDate: String,
    value: String,
  }],
  legalAndSafety: {
    legallyAllowed: Boolean,
    previousDisputes: String,
    safetyPlanTraining: Boolean,
    healthLimitations: String,
  },
  additionalInfo: {
    motivation: String,
    languagesSkillsEquipment: String,
  },
});

const DesignerDetailsSchema = new mongoose.Schema({
  fullName: String,
  dateOfBirth: String,
  gender: { type: String, enum: ["Male", "Female", "Other"] },
  address: String,
  phone: String,
  email: String,
  portfolio: String,
  positionApplied: String,
  startDate: String,
  preferredWorkType: { type: String, enum: ["Full-time", "Part-time", "Freelance/Contract"] },
  expectedSalary: String,
  toolsProficiency: [String],
  designSkills: [String],
  certifications: [String],
  education: {
    highestQualification: String,
    fieldOfStudy: String,
    institutionName: String,
  },
  employmentHistory: [{
    companyOrClient: String,
    role: String,
    startDate: String,
    endDate: String,
    achievements: String,
  }],
  portfolioSamples: [String],
  topProjects: [String],
  additionalInfo: {
    languages: [String],
    hobbies: [String],
    motivation: String,
  },
});

const JobApplicationSchema = new mongoose.Schema({
  role: { type: String, enum: ["worker", "contractor", "designer"], required: true },
  type: { type: String, enum: ["construction", "repair"], required: true },
  applicantId: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
  applicantName: String,
  status: { type: String, enum: ["pending", "approved", "assigned", "rejected"], default: "pending" },
  assignedProjectId: { type: mongoose.Schema.Types.ObjectId, ref: "ConstructionProject" },
  workerDetails: WorkerDetailsSchema,
  contractorDetails: ContractorDetailsSchema,
  designerDetails: DesignerDetailsSchema,
  title: String,
  description: String,
}, { timestamps: true });

module.exports = mongoose.model("JobApplication", JobApplicationSchema);
